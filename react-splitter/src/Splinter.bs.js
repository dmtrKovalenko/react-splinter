// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pane from "./Pane.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Resizer from "./Resizer.bs.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as ReactHelper from "./ReactHelper.bs.js";

function processChildren(element) {
  if (!ReactHelper.isElementTypeEqual(element, Pane.make)) {
    Pervasives.failwith("Only Pane elements supported as children");
  }
  return element;
}

function mapChildrenToSizes(children) {
  return children.reduce((function (sizesArray, element) {
                if (ReactHelper.isElementTypeEqual(element, Pane.make)) {
                  return [ReactHelper.getInitialSize(element)].concat(sizesArray);
                } else {
                  return sizesArray;
                }
              }), []);
}

function recalculateSizes(_offset, resizingIndex, sizes) {
  var originalValue = Caml_array.get(sizes, resizingIndex);
  var newValue = Belt_Option.map(originalValue, (function (value) {
          return value + 2 | 0;
        }));
  return sizes.map(function (size, i) {
              if (i === resizingIndex) {
                return newValue;
              } else if (size !== undefined) {
                return size - 2 | 0;
              } else {
                return ;
              }
            });
}

function Splinter(Props) {
  var children = Props.children;
  var split = Props.split;
  var rootRef = React.useRef(null);
  React.useRef(undefined);
  var match = React.useState(function () {
        return mapChildrenToSizes(children);
      });
  var setSizes = match[1];
  var sizes = match[0];
  var rootStyle = split ? ({
        display: "flex",
        flexDirection: "row"
      }) : ({
        display: "flex",
        flexDirection: "column"
      });
  var elements = children.reduce((function (finalArray, element, i) {
            if (ReactHelper.isElementTypeEqual(element, Pane.make)) {
              return [React.cloneElement(element, {
                              size: Caml_array.get(sizes, i),
                              _renderResizer: i === (children.length - 1 | 0) ? (function (param) {
                                    return React.createElement(Resizer.make, {
                                                onResize: (function (value) {
                                                    return Curry._1(setSizes, (function (param) {
                                                                  return recalculateSizes(value, i, param);
                                                                }));
                                                  }),
                                                split: split
                                              });
                                  }) : undefined
                            })].concat(finalArray);
            } else {
              return finalArray;
            }
          }), []).map(function (element, i) {
        return React.createElement(React.Fragment, {
                    children: element,
                    key: i
                  });
      });
  return React.createElement("div", {
              ref: rootRef,
              style: rootStyle
            }, elements);
}

var make = Splinter;

export {
  processChildren ,
  mapChildrenToSizes ,
  recalculateSizes ,
  make ,
  
}
/* Pane Not a pure module */
